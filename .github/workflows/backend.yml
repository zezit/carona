name: Testes Unitários 🧪 - Backend

on:
  push:
    paths:
      # - '**'
      - 'code/backend/**'
    branches-ignore:
      - 'dependabot/**' #avoid duplicates: only run the PR, not the push
  pull_request:
    paths:
      # - '**'
      - 'code/backend/**'

jobs:
  unit_tests:
    if: (github.event_name != 'pull_request' && ! github.event.pull_request.head.repo.fork) || (github.event_name == 'pull_request' && (github.event.pull_request.head.repo.fork || startsWith(github.head_ref, 'dependabot/')))
    runs-on: ubuntu-latest
    permissions:
      contents: write
      checks: write
      statuses: write

    env:
      DB_HOST: localhost
      DB_PORT: 3306
      DB_NAME: carpool_db
      DB_USERNAME: root
      DB_PASSWORD: carpool_password
      SERVER_PORT: 8080

    steps:
      - name: Checando código fonte
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch full history for comparison

      - name: Configurando JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Configurando cache do Maven
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven

      - name: Compilando e executando testes com cobertura
        working-directory: ./code/backend
        run: mvn clean verify

      - name: Generate Coverage Badge
        id: coverage_badge
        uses: cicirello/jacoco-badge-generator@v2
        with:
          generate-branches-badge: false
          jacoco-csv-file: code/backend/target/site/jacoco/jacoco.csv
          badges-directory: code/backend/badges
          coverage-label: 'Backend - Code Coverage 🔍'
          coverage-badge-filename: lines.svg

      - name: Generate Branches Badge
        id: branches_badge
        uses: cicirello/jacoco-badge-generator@v2
        with:
          generate-coverage-badge: false
          generate-branches-badge: true
          jacoco-csv-file: code/backend/target/site/jacoco/jacoco.csv
          badges-directory: code/backend/badges
          branches-label: 'Backend - Branch Coverage 🌿'
          branches-badge-filename: branches.svg
          
      - name: Update README with badges
        run: |
          # Copy badges to root directory
          mkdir -p .github/badges
          cp code/backend/badges/*.svg .github/badges/
          
          # Update README with new badges - replace only the badges without affecting other content
          BADGE_LINE="![Backend - Code Coverage 🔍](.github/badges/lines.svg) ![Backend - Branch Coverage 🌿](.github/badges/branches.svg)"
          
          # Check if the badge line already exists in the README
          if grep -q "Backend - Code Coverage 🔍" README.md && grep -q "Backend - Branch Coverage 🌿" README.md; then
            # Badges already exist, replace the line
            sed -i 's|!\[Backend - Code Coverage 🔍\](.*/lines.svg) !\[Backend - Branch Coverage 🌿\](.*/branches.svg)|'"$BADGE_LINE"'|g' README.md
          else
            # Badges don't exist, add them to the top
            # First check and remove any old workflow badge line if it exists
            if grep -q "actions/workflows/backend.yml/badge.svg" README.md; then
              sed -i '/actions\/workflows\/backend.yml\/badge.svg/d' README.md
            fi
            
            # Add the badges at the top of the file
            sed -i "1s/^/$BADGE_LINE\n/" README.md
          fi

      - name: Commit e push das badges
        if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
        uses: EndBug/add-and-commit@v9
        with:
          add: '.github/badges/* README.md'
          message: 'doc: Atualiza badges de cobertura de código [skip ci]'
          default_author: github_actions

      - name: Get main branch coverage for comparison
        id: main_coverage
        if: github.ref != 'refs/heads/main'
        continue-on-error: true
        run: |
          echo "Getting main branch coverage for comparison..."
          
          # Store current branch
          CURRENT_BRANCH=$(git branch --show-current)
          
          # Try to checkout main and run coverage
          if git checkout main 2>/dev/null; then
            echo "Successfully checked out main branch"
            
            # Run tests on main branch to get coverage
            cd ./code/backend
            if mvn clean test jacoco:report -q; then
              MAIN_REPORT="./target/site/jacoco/jacoco.xml"
              if [ -f "$MAIN_REPORT" ]; then
                # Extract main branch coverage
                MAIN_COVERED_LINES=$(xmllint --xpath "string(/report/counter[@type='LINE']/@covered)" $MAIN_REPORT)
                MAIN_MISSED_LINES=$(xmllint --xpath "string(/report/counter[@type='LINE']/@missed)" $MAIN_REPORT)
                MAIN_BRANCH_COVERED=$(xmllint --xpath "string(/report/counter[@type='BRANCH']/@covered)" $MAIN_REPORT)
                MAIN_BRANCH_MISSED=$(xmllint --xpath "string(/report/counter[@type='BRANCH']/@missed)" $MAIN_REPORT)
                
                # Calculate main branch percentages
                MAIN_TOTAL_LINES=$((MAIN_COVERED_LINES + MAIN_MISSED_LINES))
                MAIN_TOTAL_BRANCHES=$((MAIN_BRANCH_COVERED + MAIN_BRANCH_MISSED))
                
                if [ $MAIN_TOTAL_LINES -gt 0 ]; then
                  MAIN_LINE_COVERAGE=$(echo "scale=2; 100*$MAIN_COVERED_LINES/$MAIN_TOTAL_LINES" | bc)
                else
                  MAIN_LINE_COVERAGE="0"
                fi
                
                if [ $MAIN_TOTAL_BRANCHES -gt 0 ]; then
                  MAIN_BRANCH_COVERAGE=$(echo "scale=2; 100*$MAIN_BRANCH_COVERED/$MAIN_TOTAL_BRANCHES" | bc)
                else
                  MAIN_BRANCH_COVERAGE="0"
                fi
                
                echo "main_line_coverage=$MAIN_LINE_COVERAGE" >> $GITHUB_OUTPUT
                echo "main_branch_coverage=$MAIN_BRANCH_COVERAGE" >> $GITHUB_OUTPUT
                echo "comparison_available=true" >> $GITHUB_OUTPUT
                echo "Main branch coverage - Lines: $MAIN_LINE_COVERAGE%, Branches: $MAIN_BRANCH_COVERAGE%"
              else
                echo "Main branch jacoco report not found"
                echo "comparison_available=false" >> $GITHUB_OUTPUT
              fi
            else
              echo "Failed to run tests on main branch"
              echo "comparison_available=false" >> $GITHUB_OUTPUT
            fi
            
            # Return to original branch
            cd ../..
            git checkout $CURRENT_BRANCH
          else
            echo "Could not checkout main branch"
            echo "comparison_available=false" >> $GITHUB_OUTPUT
          fi

      - name: Extraindo e verificando cobertura
        id: extract_coverage
        if: always()
        run: |
          REPORT_FILE="./code/backend/target/site/jacoco/jacoco.xml"
          if [ -f "$REPORT_FILE" ]; then
            echo "report_exists=true" >> $GITHUB_OUTPUT
            
            # Install xmllint if needed
            if ! command -v xmllint &> /dev/null; then
              sudo apt-get install -y libxml2-utils
            fi
            
            # Extract coverage data
            COVERED_LINES=$(xmllint --xpath "string(/report/counter[@type='LINE']/@covered)" $REPORT_FILE)
            MISSED_LINES=$(xmllint --xpath "string(/report/counter[@type='LINE']/@missed)" $REPORT_FILE)
            BRANCH_COVERED=$(xmllint --xpath "string(/report/counter[@type='BRANCH']/@covered)" $REPORT_FILE)
            BRANCH_MISSED=$(xmllint --xpath "string(/report/counter[@type='BRANCH']/@missed)" $REPORT_FILE)
            
            # Calculate percentages
            TOTAL_LINES=$((COVERED_LINES + MISSED_LINES))
            TOTAL_BRANCHES=$((BRANCH_COVERED + BRANCH_MISSED))
            
            if [ $TOTAL_LINES -gt 0 ]; then
              LINE_COVERAGE=$(echo "scale=2; 100*$COVERED_LINES/$TOTAL_LINES" | bc)
            else
              LINE_COVERAGE="0"
            fi
            
            if [ $TOTAL_BRANCHES -gt 0 ]; then
              BRANCH_COVERAGE=$(echo "scale=2; 100*$BRANCH_COVERED/$TOTAL_BRANCHES" | bc)
            else
              BRANCH_COVERAGE="0"
            fi
            
            # Set thresholds
            LINE_THRESHOLD=70
            BRANCH_THRESHOLD=60
            
            # Output data for GitHub summary
            echo "covered_lines=$COVERED_LINES" >> $GITHUB_OUTPUT
            echo "missed_lines=$MISSED_LINES" >> $GITHUB_OUTPUT
            echo "total_lines=$TOTAL_LINES" >> $GITHUB_OUTPUT
            echo "line_coverage=$LINE_COVERAGE" >> $GITHUB_OUTPUT
            echo "branch_covered=$BRANCH_COVERED" >> $GITHUB_OUTPUT
            echo "branch_missed=$BRANCH_MISSED" >> $GITHUB_OUTPUT
            echo "total_branches=$TOTAL_BRANCHES" >> $GITHUB_OUTPUT
            echo "branch_coverage=$BRANCH_COVERAGE" >> $GITHUB_OUTPUT
            
            # Prepare comparison data for JUnit report
            COMPARISON_SUMMARY=""
            if [ "${{ github.ref }}" != "refs/heads/main" ] && [ "${{ steps.main_coverage.outputs.comparison_available }}" == "true" ]; then
              MAIN_LINE_COV="${{ steps.main_coverage.outputs.main_line_coverage }}"
              MAIN_BRANCH_COV="${{ steps.main_coverage.outputs.main_branch_coverage }}"
              
              LINE_DIFF=$(echo "scale=2; $LINE_COVERAGE - $MAIN_LINE_COV" | bc)
              BRANCH_DIFF=$(echo "scale=2; $BRANCH_COVERAGE - $MAIN_BRANCH_COV" | bc)
              
              if (( $(echo "$LINE_DIFF >= 0" | bc -l) )); then
                LINE_TREND="📈 +$LINE_DIFF%"
              else
                LINE_TREND="📉 $LINE_DIFF%"
              fi
              
              if (( $(echo "$BRANCH_DIFF >= 0" | bc -l) )); then
                BRANCH_TREND="📈 +$BRANCH_DIFF%"
              else
                BRANCH_TREND="📉 $BRANCH_DIFF%"
              fi
              
              COMPARISON_SUMMARY="
              
              🔄 **Comparação com branch main:**
              - **Linhas:** $LINE_COVERAGE% (main: $MAIN_LINE_COV%) $LINE_TREND
              - **Branches:** $BRANCH_COVERAGE% (main: $MAIN_BRANCH_COV%) $BRANCH_TREND"
            fi
            
            # Create summary report
            echo "## 📊 Relatório de Cobertura de Código" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Add branch comparison if available
            if [ "${{ github.ref }}" != "refs/heads/main" ] && [ "${{ steps.main_coverage.outputs.comparison_available }}" == "true" ]; then
              MAIN_LINE_COV="${{ steps.main_coverage.outputs.main_line_coverage }}"
              MAIN_BRANCH_COV="${{ steps.main_coverage.outputs.main_branch_coverage }}"
              
              LINE_DIFF=$(echo "scale=2; $LINE_COVERAGE - $MAIN_LINE_COV" | bc)
              BRANCH_DIFF=$(echo "scale=2; $BRANCH_COVERAGE - $MAIN_BRANCH_COV" | bc)
              
              echo "### 🔄 Comparação com branch main" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "| Métrica | Branch Atual | Main | Diferença | Tendência |" >> $GITHUB_STEP_SUMMARY
              echo "| ------- | ------------ | ---- | --------- | --------- |" >> $GITHUB_STEP_SUMMARY
              
              if (( $(echo "$LINE_DIFF >= 0" | bc -l) )); then
                LINE_TREND="📈 +$LINE_DIFF%"
                LINE_STATUS_EMOJI="✅"
              else
                LINE_TREND="📉 $LINE_DIFF%"
                LINE_STATUS_EMOJI="⚠️"
              fi
              
              if (( $(echo "$BRANCH_DIFF >= 0" | bc -l) )); then
                BRANCH_TREND="📈 +$BRANCH_DIFF%"
                BRANCH_STATUS_EMOJI="✅"
              else
                BRANCH_TREND="📉 $BRANCH_DIFF%"
                BRANCH_STATUS_EMOJI="⚠️"
              fi
              
              echo "| Linhas | $LINE_COVERAGE% | $MAIN_LINE_COV% | $LINE_DIFF% | $LINE_TREND |" >> $GITHUB_STEP_SUMMARY
              echo "| Branches | $BRANCH_COVERAGE% | $MAIN_BRANCH_COV% | $BRANCH_DIFF% | $BRANCH_TREND |" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
            
            echo "### 🎯 Verificação de Limites Mínimos" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Métrica | Atual | Mínimo | Status |" >> $GITHUB_STEP_SUMMARY
            echo "| ------- | ----- | ------ | ------ |" >> $GITHUB_STEP_SUMMARY
            
            # Check line coverage
            if (( $(echo "$LINE_COVERAGE < $LINE_THRESHOLD" | bc -l) )); then
              echo "| Linhas | $LINE_COVERAGE% | $LINE_THRESHOLD% | ❌ FALHA |" >> $GITHUB_STEP_SUMMARY
              LINE_STATUS="fail"
            else
              echo "| Linhas | $LINE_COVERAGE% | $LINE_THRESHOLD% | ✅ PASSOU |" >> $GITHUB_STEP_SUMMARY
              LINE_STATUS="pass"
            fi
            
            # Check branch coverage
            if (( $(echo "$BRANCH_COVERAGE < $BRANCH_THRESHOLD" | bc -l) )); then
              echo "| Branches | $BRANCH_COVERAGE% | $BRANCH_THRESHOLD% | ❌ FALHA |" >> $GITHUB_STEP_SUMMARY
              BRANCH_STATUS="fail"
            else
              echo "| Branches | $BRANCH_COVERAGE% | $BRANCH_THRESHOLD% | ✅ PASSOU |" >> $GITHUB_STEP_SUMMARY
              BRANCH_STATUS="pass"
            fi
            
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 📋 Detalhes" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "- **Linhas cobertas:** $COVERED_LINES de $TOTAL_LINES" >> $GITHUB_STEP_SUMMARY
            echo "- **Branches cobertos:** $BRANCH_COVERED de $TOTAL_BRANCHES" >> $GITHUB_STEP_SUMMARY
            echo "- **Branch atual:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
            
            # Set status for JUnit report
            if [ "$LINE_STATUS" = "fail" ] || [ "$BRANCH_STATUS" = "fail" ]; then
              echo "coverage_status=❌ COBERTURA INSUFICIENTE" >> $GITHUB_OUTPUT
            else
              echo "coverage_status=✅ COBERTURA OK" >> $GITHUB_OUTPUT
            fi
            
            # Create detailed coverage summary for JUnit report
            echo "coverage_summary=📊 **Cobertura Atual:** Linhas $LINE_COVERAGE% | Branches $BRANCH_COVERAGE%$COMPARISON_SUMMARY" >> $GITHUB_OUTPUT
            
            # Check if thresholds are met and fail if not
            if [ "$LINE_STATUS" = "fail" ] || [ "$BRANCH_STATUS" = "fail" ]; then
              echo "::error::A cobertura de código está abaixo do mínimo exigido. Linhas: $LINE_COVERAGE% (mín: $LINE_THRESHOLD%), Branches: $BRANCH_COVERAGE% (mín: $BRANCH_THRESHOLD%). Adicione mais testes para aumentar a cobertura."
              exit 1
            else
              echo "✅ A cobertura de código atende aos requisitos mínimos."
            fi
          else
            echo "report_exists=false" >> $GITHUB_OUTPUT
            echo "coverage_status=❌ RELATÓRIO NÃO ENCONTRADO" >> $GITHUB_OUTPUT
            echo "coverage_summary=❌ Relatório de cobertura não foi gerado" >> $GITHUB_OUTPUT
            echo "::error::Relatório de cobertura não foi gerado. Verifique se os testes foram executados corretamente."
            exit 1
          fi

      - name: Publicar relatório de testes JUnit
        uses: mikepenz/action-junit-report@v5
        if: always()
        with:
          report_paths: 'code/backend/target/surefire-reports/TEST-*.xml'
          detailed_summary: true
          include_passed: true
          check_name: 'JUnit Test Report 🧪'
          summary: |
            ## 🧪 Relatório de Testes Unitários
            
            **Status:** ${{ steps.extract_coverage.outputs.coverage_status }}
            
            ${{ steps.extract_coverage.outputs.coverage_summary }}
            
            **Limites mínimos:** Linhas ≥ 70% | Branches ≥ 60%
            
            ---
