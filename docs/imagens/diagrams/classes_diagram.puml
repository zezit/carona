@startuml classes_diagram
left to right direction

' ============ Enumeradores Consolidados ============
enum TipoUsuario {
 ADMINISTRADOR
 ESTUDANTE
}

enum Status {
 PENDENTE
 APROVADO
 REJEITADO
 CANCELADO
 FINALIZADO
}

enum StatusCarona {
 AGENDADA
 EM_ANDAMENTO
 FINALIZADA
 CANCELADA
}

' ============ Entidades ============
abstract class Usuario {
 - nome: string
 - email: string
 - senha: string
 - tipo: TipoUsuario
 + autenticar(email: string, senha: string): boolean
 + alterarSenha(senhaAtual: string, novaSenha: string): boolean
}

class Estudante {
 - dataDeNascimento: LocalDate
 - matricula: string
 - avaliacaoMedia: float
 - statusCadastro: Status
 + solicitarCarona(carona: Carona): SolicitacaoCarona
 + avaliarUsuario(usuario: Estudante, nota: int, comentario: string): Avaliacao
 + isMotorista(): boolean
}

class PerfilMotorista {
 - veiculo: Carro
 - cnh: string
 - whatsapp: string
 - mostrarWhatsapp: boolean
 + criarCarona(origem: Parada, destino: Parada, horario: DateTime): Carona
 + cancelarCarona(carona: Carona): boolean
}

class Administrador {
 - denunciasSolucionadas: List<Denuncia>
 + aprovarCadastroUsuario(estudante: Estudante): boolean
}

class Carro {
 - modelo: string
 - placa: string
 - cor: string
 - capacidadePassageiros: int
 + atualizarInformacoes(modelo: string, cor: string): boolean
}

class Carona {
 - origem: Parada
 - destino: Parada
 - recorrente: boolean
 - horarioDePartida: DateTime
 - horaDeChegada: DateTime
 - status: StatusCarona
 + adicionarParada(endereco: string, ordem: int): Parada
 + alterarStatus(novoStatus: StatusCarona): boolean
}

class SolicitacaoCarona {
 - status: Status
 - dataSolicitacao: DateTime
 + aceitar(): boolean
 + recusar(): boolean
 + cancelar(): boolean
}

class Parada {
 - endereco: string
 - latitude: float
 - longitude: float
 - ordem: int
 + alterarOrdem(novaOrdem: int): boolean
}

class Avaliacao {      
 - nota: int
 - comentario: string
 - data: DateTime
 + reportarAvaliacaoImpropria(): Denuncia
}

class Denuncia {
 - descricao: string
 - data: DateTime
 - status: Status
 + validarDenuncia(): boolean
 + rejectarDenuncia(): boolean
}

class Notificacao {
 - mensagem: string
 - horarioDeEnvio: DateTime
 - resposta: boolean
 + responder(resposta: boolean): boolean
 + reenviar(): boolean
}

' ============ Relacionamentos ============
' Hierarquia de Usuários
Usuario <|-- Estudante
Usuario <|-- Administrador

' Estudante pode ter um perfil de motorista
Estudante "1" -- "0..1" PerfilMotorista : possui >

' Motorista e Carro
PerfilMotorista -- Carro : possui >

' Carona conduzida pelo Motorista
Carona "0..*" -l- "1" PerfilMotorista : < conduzida por

' Solicitação de Carona
Estudante "1" -- "0..*" SolicitacaoCarona : solicita >
Carona "1" -- "0..*" SolicitacaoCarona : < recebe

' Carona e suas Paradas
Carona "1" -d- "0..*" Parada : possui >

' Passageiros participam de caronas (simplificado)
Carona "0..*" -- "0..*" Estudante : tem passageiros >

' Avaliações
Estudante "1" -- "0..*" Avaliacao : possui >

' Denúncias
Estudante "1" -d- "0..*" Denuncia : possui >
Administrador "0..1" -- "0..*" Denuncia : avalia >

' Notificações
Usuario "1" -u- "0..*" Notificacao : recebe >
@enduml